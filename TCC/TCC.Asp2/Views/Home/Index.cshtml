@model TCC.Logic.Base.AlgorithmResult;
@{
    ViewData["Title"] = "Home Page";

    var encryptSelection = Enum.GetValues<TCC.Logic.Implementations.Enums.EncryptionAlgorithms>().Select(x =>
        new SelectListItem()
                {
                    Text = x.ToString(),
                    Value = ((int)x).ToString()
                }).ToArray();

    var compressionSelection = Enum.GetValues<TCC.Logic.Implementations.Enums.CompressionAlgorithms>().Select(x =>
        new SelectListItem()
                {
                    Text = x.ToString(),
                    Value = ((int)x).ToString()
                }).ToArray();
}

<form asp-controller="Home" method="post" asp-antiforgery="true">
    <div class="container mt-4">
        <h2>TTC - Toller Text Converter</h2>
        <div class="row mt-4">

            <!-- Input -->
            <div class="col-md-5">
                <div>
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <label class="form-label mb-0" for="inputText">Input</label>
                    <a class="btn btn-outline-secondary btn-sm"
                       asp-action="btnUploadfile" id="btnUpload">Upload file</a>
                </div>

                @* Textarea für Input *@
                @Html.TextArea("input", Model?.Input ?? string.Empty, 20, 0, new { @class = "form-control", id = "inputText" })
                <div class="d-flex justify-content-between mt-2">
                    <a class="btn btn-primary" asp-action="btnCopyTextInput" id="btnCopyInput"> Copy </a>
                </div>

                <div class="d-flex justify-content-between align-items-center mb-2">
                        <label class="form-label mb-0" for="keyText">Key @Model?.Key</label>
                </div>
                <!--todo move key into text area-->
                @* Textarea für Key *@
                @Html.TextArea("key", Model?.Key ?? string.Empty, 2, 0, new { @class = "form-control", id = "keyText" })
                </div>

            </div>

            <!-- Middle -->
            <div class="col-md-2 d-flex flex-column align-items-center justify-content-center">

                <!-- Compress/Decompress -->
                <div class="w-100 mb-4">
                    @Html.DropDownList("compressionType", compressionSelection,new { @class = "form-select mb-2", id = "compressionType"})
                    <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary mb-2 w-100" id="btnCompress" formaction="@Url.Action("BtnCompressText","Home")"> Compress</button>
                    <button type="submit" style="background-color:#ffcccc; color:#800000; border:none;" class="btn mb-2 flex-fill" id="btnDecompress" formaction="@Url.Action("BtnDecompressText","Home")"> Decompress</button>
                    </div>
                </div>

                <!-- Encrypt/Decrypt -->
                <div class="w-100 py-5">
                    @Html.DropDownList("encryptionType", encryptSelection, new { @class = "form-select mb-2", id = "encryptionType"})
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary mb-2 flex-fill" id="btnEncrypt" formaction="@Url.Action("BtnEncryptText", "Home")">Encrypt</button>
                        <button type="submit" style="background-color:#ffcccc; color:#800000; border:none;" class="btn mb-2 flex-fill" id="btnDecrypt" formaction="@Url.Action("BtnDecryptText", "Home")"> Decrypt</button>
                    </div>
                </div>


                <!-- Stats -->
                <div class="mt-4 text-center">
                    <strong>Stats</strong><br />
                    <span id="stats">
                        Size difference: 
                        @if (Model == null)
                        {
                            <span>-</span>
                        }
                        else
                        {
                            <span>@Model.Statistic.SizeDifference</span>
                        } Bytes
                        <br />

                        @if (Model == null)
                        {
                            <span>-</span>
                        }
                        else
                        {
                            <span>@Model.Statistic.SavedSizePercent</span>
                        } % saved
                    </span>
                </div>
            </div>

            <!-- Output -->
            <div class="col-md-5">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <label class="form-label mb-0" for="outputText">Output</label>
                    <a class="btn btn-outline-secondary btn-sm" asp-action="btnDownloadAsFile" id="btnDownload"> Download as file </a>
                </div>

                @* Textarea für Output *@
                @Html.TextArea("output", Model?.Output ?? string.Empty, 20, 0, new { @class = "form-control", id = "outputText", @readonly = "readonly"} )

                <div class="d-flex justify-content-between mt-2">
                    <a class="btn btn-primary"
                       asp-action="btnCopyTextOutput"
                       id="btnCopyOutput">
                        Copy
                    </a>
                </div>
            </div>

        </div>
    </div>
</form>